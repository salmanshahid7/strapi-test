"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptions = void 0;
const typescript_1 = __importDefault(require("typescript"));
const fs_1 = __importDefault(require("fs"));
function convertConfigToCompilerOptions(opts) {
    const { options, errors } = typescript_1.default.parseJsonConfigFileContent({
        ...opts,
        // if files are not specified then parseJsonConfigFileContent
        // will use ParseConfigHost to collect files in containing folder
        files: [],
    }, typescript_1.default.sys, '');
    // Remove the following error:
    // { messageText: "The 'files' list in config file 'tsconfig.json' is empty.", category: 1, code: 18002 }
    const relevantErrors = errors.filter((e) => e.code !== 18002);
    if (relevantErrors.length > 0) {
        throw relevantErrors;
    }
    return options;
}
/**
 * Get the TypeScript compiler options
 */
const getOptions = (customOptions = {}, ignoreProjectOptions = false) => {
    if (ignoreProjectOptions) {
        return customOptions;
    }
    const maybeFile = typescript_1.default.findConfigFile(__dirname, fs_1.default.existsSync);
    if (maybeFile === undefined) {
        throw new Error('setOptions: Cannot find tsconfig.json');
    }
    const { config, error } = typescript_1.default.readConfigFile(maybeFile, (path) => fs_1.default.readFileSync(path).toString());
    if (error !== undefined) {
        throw new Error(`TS${error.code}: ${error.file}:${error.start} ${error.messageText}`);
    }
    const parsedConfig = convertConfigToCompilerOptions(config);
    return { ...parsedConfig, ...customOptions };
};
exports.getOptions = getOptions;
//# sourceMappingURL=options.js.map