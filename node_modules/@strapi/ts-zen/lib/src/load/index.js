"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFromRaw = exports.loadFromRecord = exports.loadFromFile = exports.load = void 0;
const typescript_1 = __importDefault(require("typescript"));
const source_1 = require("../source");
const assert_1 = require("../assert");
const program_1 = require("./program");
function load(source) {
    const { ignoreProjectOptions, compilerOptions, raw, baseUrl } = source.getOptions() ?? {};
    const code = sanitizeCode([raw ?? ''].concat(source.toString()).join(typescript_1.default.sys.newLine));
    const { program, sourceFile } = (0, program_1.createInlineProgram)(code, compilerOptions, ignoreProjectOptions, baseUrl);
    const checker = program.getTypeChecker();
    const symbols = parseSymbols(checker, sourceFile);
    const diagnostics = getProgramDiagnostics(program, sourceFile);
    return (0, assert_1.createAssertTypeSelector)(symbols, diagnostics, checker, sourceFile, program);
}
exports.load = load;
const sanitizeCode = (code) => {
    return (code
        // Remove @ts-expect error comments
        .replaceAll(/^[ \t]*\/\/[ \t]*@ts-expect-error.*$/gm, ''));
};
const getProgramDiagnostics = (program, sourceFile) => [
    ...program.getSyntacticDiagnostics(sourceFile),
    ...program.getSemanticDiagnostics(sourceFile),
    ...program.getDeclarationDiagnostics(sourceFile),
];
const parseSymbols = (checker, sourceFile) => {
    const exportedTypes = sourceFile.statements
        .filter((statement) => statement.kind === typescript_1.default.SyntaxKind.ExportDeclaration)
        .map((declaration) => declaration.exportClause)
        .filter((clause) => clause?.kind === typescript_1.default.SyntaxKind.NamedExports)
        .reduce((elements, clause) => [...elements, ...clause.elements], [])
        .map((specifier) => specifier.name.escapedText);
    return checker
        .getSymbolsInScope(sourceFile.endOfFileToken, typescript_1.default.SymbolFlags.Type)
        .filter((symbol) => exportedTypes.includes(symbol.escapedName))
        .reduce((acc, symbol) => ({ ...acc, [symbol.name]: symbol }), {});
};
function loadFromFile(filePath, options) {
    const fileSource = (0, source_1.createSourceFromFile)(filePath, options);
    return load(fileSource);
}
exports.loadFromFile = loadFromFile;
function loadFromRecord(record, options) {
    const recordSource = (0, source_1.createSourceFromRecord)(record, options);
    return load(recordSource);
}
exports.loadFromRecord = loadFromRecord;
function loadFromRaw(code, options) {
    const rawSource = (0, source_1.createSourceFromRaw)(code, options);
    return load(rawSource);
}
exports.loadFromRaw = loadFromRaw;
//# sourceMappingURL=index.js.map