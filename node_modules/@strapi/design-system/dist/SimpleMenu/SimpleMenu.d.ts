import React from 'react';
import { Placement } from '@floating-ui/react-dom';
import { NavLinkProps } from 'react-router-dom';
export interface MenuItemProps extends Omit<NavLinkProps, 'to'> {
    as?: React.ElementType;
    children: React.ReactNode;
    href?: string;
    isFocused?: boolean;
    onClick?: () => void;
    to?: string;
    isExternal?: boolean;
}
export declare const MenuItem: ({ children, onClick, to, isFocused, href, ...props }: MenuItemProps) => import("react/jsx-runtime").JSX.Element;
export type SimpleMenuProps<As extends React.ElementType = React.ElementType> = Omit<React.ComponentPropsWithoutRef<As>, 'as' | 'children' | 'id' | 'label' | 'onClose' | 'onOpen' | 'onReachEnd' | 'popoverPlacement' | 'size'> & {
    as?: As;
    children: React.ReactNode;
    id?: string;
    label: React.ReactElement | string | number;
    onClose?: () => void;
    onOpen?: () => void;
    /**
     * Callback function to be called when the popover reaches the end of the scrollable content
     */
    onReachEnd?: () => void;
    popoverPlacement?: Placement;
    /**
     * Size of the trigger button.
     * Note: in case a custom component is passed through the "as"
     * prop, the size prop is passed along too, but needs to be handled there
     */
    size?: 'S' | 'M';
};
export declare const SimpleMenu: <As extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = React.ForwardRefExoticComponent<import("../Button").ButtonProps & React.RefAttributes<HTMLButtonElement>>>({ label, children, id, as: asComp, onOpen, onClose, size, popoverPlacement, onReachEnd, ...props }: SimpleMenuProps<As>) => import("react/jsx-runtime").JSX.Element;
