import * as React from 'react';
import { CalendarDate } from '@internationalized/date';
import { FieldProps } from '../Field';
import { FlexProps } from '../Flex';
interface DatePickerContextValue {
    calendarDate: CalendarDate;
    content: DatePickerContentElement | null;
    contentId: string;
    disabled: boolean;
    locale: string;
    minDate: CalendarDate;
    maxDate: CalendarDate;
    open: boolean;
    onCalendarDateChange: (date: CalendarDate) => void;
    onContentChange: (content: DatePickerContentElement | null) => void;
    onOpenChange: (isOpen: boolean) => void;
    onTextInputChange: (textInput: DatePickerTextInputElement | null) => void;
    onTextValueChange: (textValue: string) => void;
    onTriggerChange: (trigger: DatePickerTriggerElement | null) => void;
    onValueChange: (value: CalendarDate | undefined) => void;
    required: boolean;
    textInput: DatePickerTextInputElement | null;
    textValue?: string;
    timeZone: string;
    trigger: DatePickerTriggerElement | null;
    value?: CalendarDate;
}
interface DatePickerInputProps extends Pick<FieldProps, 'required' | 'id' | 'error'>, Pick<Partial<DatePickerContextValue>, 'disabled' | 'locale'>, Pick<TextInputProps, 'placeholder'>, Pick<CalendarProps, 'monthSelectLabel' | 'yearSelectLabel'>, Pick<TriggerProps, 'size'>, Omit<TextInputProps, 'size' | 'onChange' | 'value' | 'id' | 'ref'> {
    calendarLabel?: string;
    className?: string;
    minDate?: Date;
    maxDate?: Date;
    /**
     * @default Now
     */
    initialDate?: Date | string;
    /**
     * onChange function, passed from a parent component, it takes the actual date value and it is used inside the different handlers related to the change event for the DatePicker and the TimePicker and also the clear event for the TimePicker
     */
    onChange?: (date: Date | undefined) => void;
    selectedDate?: Date | string;
    /**
     * @deprecated This is no longer used.
     */
    ariaLabel?: string;
    /**
     * @preserve
     * @deprecated This is no longer used.
     */
    selectedDateLabel?: (date: string) => string;
    onClear?: (e: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLDivElement>) => void;
    clearLabel?: string;
}
declare const DatePickerInput: React.ForwardRefExoticComponent<DatePickerInputProps & React.RefAttributes<HTMLInputElement>>;
type DatePickerTriggerElement = HTMLDivElement;
interface TriggerProps extends FlexProps {
    hasError?: boolean;
    /**
     * @default "M"
     */
    size?: 'S' | 'M';
}
type DatePickerTextInputElement = HTMLInputElement;
interface TextInputProps extends React.ComponentPropsWithRef<'input'> {
}
type DatePickerContentElement = DatePickerContentImplElement;
type DatePickerContentImplElement = HTMLDivElement;
interface CalendarProps extends FlexProps<'div'> {
    monthSelectLabel?: string;
    yearSelectLabel?: string;
}
interface DatePickerProps extends Pick<FieldProps, 'hint'>, DatePickerInputProps {
    label: string;
}
declare const DatePicker: React.ForwardRefExoticComponent<DatePickerProps & React.RefAttributes<HTMLInputElement>>;
type DatePickerElement = DatePickerTextInputElement;
export { DatePicker, DatePickerInput };
export type { DatePickerProps, DatePickerInputProps, DatePickerElement };
