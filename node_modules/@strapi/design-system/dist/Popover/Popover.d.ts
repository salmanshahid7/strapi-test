import * as React from 'react';
import { Placement } from '@floating-ui/react-dom';
import { BoxProps } from '../Box';
import { DismissibleLayerProps } from '../DismissibleLayer';
export declare const POPOVER_PLACEMENTS: readonly ["top", "top-start", "top-end", "right", "right-start", "right-end", "bottom", "bottom-start", "bottom-end", "left", "left-start", "left-end"];
export interface ContentProps extends BoxProps<'div'>, Pick<DismissibleLayerProps, 'onEscapeKeyDown' | 'onPointerDownOutside' | 'onDismiss' | 'onFocusOutside'> {
    source: React.MutableRefObject<HTMLElement>;
    placement?: Placement;
    fullWidth?: boolean;
    centered?: boolean;
    spacing?: number;
    hideAria?: boolean;
}
export declare const Content: React.ForwardRefExoticComponent<ContentProps & React.RefAttributes<HTMLDivElement>>;
export interface ScrollingProps extends BoxProps<'div'> {
    intersectionId?: string;
    onReachEnd?: (entry: IntersectionObserverEntry) => void;
}
export declare const Scrolling: ({ children, intersectionId, onReachEnd, ...props }: ScrollingProps) => import("react/jsx-runtime").JSX.Element;
export type PopoverProps = ScrollingProps & Pick<ContentProps, 'source' | 'spacing' | 'fullWidth' | 'placement' | 'centered' | 'onEscapeKeyDown' | 'onPointerDownOutside' | 'onDismiss'>;
export declare const Popover: ({ children, source, spacing, fullWidth, placement, centered, onEscapeKeyDown, onPointerDownOutside, onDismiss, ...restProps }: PopoverProps) => import("react/jsx-runtime").JSX.Element;
