import type { CSSProperties } from 'react';
import { DefaultTheme } from 'styled-components';
import { DefaultThemeOrCSSProp } from '../types';
interface ResponsiveValueObject {
    desktop?: keyof DefaultTheme['spaces'];
    tablet?: keyof DefaultTheme['spaces'];
    mobile?: keyof DefaultTheme['spaces'];
}
type ResponsiveValueTuple = [
    desktop?: keyof DefaultTheme['spaces'],
    tablet?: keyof DefaultTheme['spaces'],
    mobile?: keyof DefaultTheme['spaces']
];
type ResponsiveCSSProperties = Pick<CSSProperties, 'margin' | 'marginLeft' | 'marginRight' | 'marginTop' | 'marginBottom' | 'padding' | 'paddingLeft' | 'paddingRight' | 'paddingTop' | 'paddingBottom'>;
export type ResponsiveValue<TCSSProp extends keyof ResponsiveCSSProperties = any> = ResponsiveValueObject | DefaultThemeOrCSSProp<'spaces', TCSSProp> | ResponsiveValueTuple;
declare const handleResponsiveValues: <TCSSProp extends "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "margin" | "padding">(property: string, value: ResponsiveValue<TCSSProp> | undefined, theme: DefaultTheme) => string | undefined;
export default handleResponsiveValues;
