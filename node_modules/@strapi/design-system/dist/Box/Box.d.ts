import * as React from 'react';
import { CSSProperties, DefaultTheme } from 'styled-components';
import { ResponsiveValue } from '../helpers/handleResponsiveValues';
import { DefaultThemeOrCSSProp } from '../types';
export type BoxProps<TElement extends keyof JSX.IntrinsicElements = 'div'> = React.ComponentPropsWithoutRef<TElement> & Pick<CSSProperties, 'pointerEvents' | 'display' | 'position' | 'zIndex' | 'overflow' | 'cursor' | 'transition' | 'transform' | 'animation' | 'textAlign' | 'textTransform'> & {
    /**
     * JavaScript hover handler
     */
    _hover?: (theme: DefaultTheme) => string;
    /**
     * Background color
     */
    background?: DefaultThemeOrCSSProp<'colors', 'background'>;
    /**
     * Flex basis
     */
    basis?: CSSProperties['flexBasis'];
    /**
     * Border color
     */
    borderColor?: keyof DefaultTheme['colors'];
    /**
     * Text color
     */
    color?: keyof DefaultTheme['colors'];
    /**
     * Flex
     */
    flex?: CSSProperties['flex'];
    fontSize?: DefaultThemeOrCSSProp<'fontSizes', 'fontSize'>;
    /**
     * Flex grow
     */
    grow?: CSSProperties['flexGrow'];
    /**
     * If `true`, will add a border radius to the `Box`
     */
    hasRadius?: boolean;
    /**
     * Responsive hiding. If `true`, will the `Box` for tablet size screens.
     */
    hiddenS?: boolean;
    /**
     * Responsive hiding. If `true`, will the `Box` for mobile size screens.
     */
    hiddenXS?: boolean;
    /**
     * Padding. Supports responsive values
     */
    padding?: ResponsiveValue<'padding'>;
    /**
     * Padding bottom. Supports responsive values
     */
    paddingBottom?: ResponsiveValue<'paddingBottom'>;
    /**
     * Padding left. Supports responsive values
     */
    paddingLeft?: ResponsiveValue<'paddingLeft'>;
    /**
     * Padding right. Supports responsive values
     */
    paddingRight?: ResponsiveValue<'paddingRight'>;
    /**
     * Padding top. Supports responsive values
     */
    paddingTop?: ResponsiveValue<'paddingTop'>;
    marginLeft?: ResponsiveValue<'marginLeft'>;
    marginBottom?: ResponsiveValue<'marginBottom'>;
    marginRight?: ResponsiveValue<'marginRight'>;
    marginTop?: ResponsiveValue<'marginTop'>;
    /**
     * Shadow name (see `theme.shadows`)
     */
    shadow?: keyof DefaultTheme['shadows'];
    /**
     * Flex shrink
     */
    shrink?: CSSProperties['flexShrink'];
    lineHeight?: DefaultThemeOrCSSProp<'lineHeights', 'lineHeight'>;
    width?: DefaultThemeOrCSSProp<'spaces', 'width'>;
    minWidth?: DefaultThemeOrCSSProp<'spaces', 'minWidth'>;
    maxWidth?: DefaultThemeOrCSSProp<'spaces', 'maxWidth'>;
    height?: DefaultThemeOrCSSProp<'spaces', 'height'>;
    minHeight?: DefaultThemeOrCSSProp<'spaces', 'minHeight'>;
    maxHeight?: DefaultThemeOrCSSProp<'spaces', 'maxHeight'>;
    top?: DefaultThemeOrCSSProp<'spaces', 'top'>;
    left?: DefaultThemeOrCSSProp<'spaces', 'left'>;
    bottom?: DefaultThemeOrCSSProp<'spaces', 'bottom'>;
    right?: DefaultThemeOrCSSProp<'spaces', 'right'>;
    borderRadius?: CSSProperties['borderRadius'];
    borderStyle?: CSSProperties['borderStyle'];
    borderWidth?: CSSProperties['borderWidth'];
    children?: React.ReactNode;
    as?: string | React.ComponentType<any>;
    forwardedAs?: string | React.ComponentType<any>;
};
export declare const Box: import("styled-components").StyledComponent<"div", DefaultTheme, BoxProps<"div">, never>;
