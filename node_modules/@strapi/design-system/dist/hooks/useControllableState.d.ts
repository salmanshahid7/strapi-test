/**
 * this is basically stolen from RadixUI but tweaked to allow the following:
 * * prop can be a function
 * * setUncontrolledProp is always called with the nextValue.
 */
/**
 * @type {<T>(params: UseControllableStateParams<T>) => [T, (nextState: T | SetStateFn<T>) => void]}
 */
export interface UseControllableStateParams<TProp> {
    prop?: TProp | undefined | ((state?: TProp | undefined) => TProp | undefined);
    defaultProp?: TProp | undefined;
    onChange?: (state?: TProp) => void;
}
type SetStateFn<TState> = (prevState: TState) => TState;
declare function useControllableState<TProp>({ prop, defaultProp, onChange, }: UseControllableStateParams<TProp>): [
    TProp | undefined,
    (nextState: TProp | undefined | SetStateFn<TProp | undefined>) => void
];
export { useControllableState };
