import * as React from 'react';
import { BaseButtonProps } from '../BaseButton';
declare const SIZES: readonly ["S", "M", "L"];
declare const VARIANTS: readonly ["tertiary", "secondary"];
type IconButtonSizes = (typeof SIZES)[number];
type Variant = (typeof VARIANTS)[number];
interface SharedIconButtonProps extends BaseButtonProps {
    disabled?: boolean;
    /**
     * @preserve
     * @deprecated use `borderWidth={0}` instead
     */
    noBorder?: boolean;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    size?: IconButtonSizes;
    variant?: Variant;
}
interface LabelOnlyProps extends SharedIconButtonProps {
    label: string;
    ['aria-label']?: never;
}
interface AriaLabelOnlyProps extends SharedIconButtonProps {
    label?: never;
    ['aria-label']: string;
}
interface IconOnlyProps {
    icon: React.ReactNode;
    children?: never;
}
interface ChildrenOnlyProps {
    icon?: never;
    children: React.ReactNode;
}
type ChildrenWithLabel = LabelOnlyProps & ChildrenOnlyProps;
type ChildrenWithAriaLabel = AriaLabelOnlyProps & ChildrenOnlyProps;
type IconWithLabel = LabelOnlyProps & IconOnlyProps;
type IconWithAriaLabel = AriaLabelOnlyProps & IconOnlyProps;
export type IconButtonProps = ChildrenWithLabel | ChildrenWithAriaLabel | IconWithLabel | IconWithAriaLabel;
export declare const IconButton: React.ForwardRefExoticComponent<IconButtonProps & React.RefAttributes<HTMLButtonElement>>;
export declare const IconButtonGroup: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, import("../Flex").FlexProps<"div">, never>;
export {};
