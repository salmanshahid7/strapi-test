import * as Menu from './Menu';
interface SimpleMenuProps extends Omit<Menu.TriggerProps, 'children'>, Pick<Menu.ContentProps, 'popoverPlacement' | 'intersectionId'> {
    children?: React.ReactNode;
    label?: React.ReactNode;
    onOpen?: () => void;
    onClose?: () => void;
    /**
     * Callback function to be called when the popover reaches the end of the scrollable content
     */
    onReachEnd?: (entry: IntersectionObserverEntry) => void;
}
declare const SimpleMenu: ({ children, onOpen, onClose, popoverPlacement, onReachEnd, ...props }: SimpleMenuProps) => import("react/jsx-runtime").JSX.Element;
declare const MenuItem: ({ onSelect, disabled, ...props }: Menu.ItemProps<import("react").ForwardRefExoticComponent<Omit<import("react").DetailedHTMLProps<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & Pick<import("styled-components").CSSProperties, "cursor" | "display" | "overflow" | "pointerEvents" | "transform" | "position" | "textAlign" | "textTransform" | "zIndex" | "animation" | "transition"> & {
    _hover?: ((theme: import("styled-components").DefaultTheme) => string) | undefined;
    background?: import("../../types").DefaultThemeOrCSSProp<"colors", "background">;
    basis?: import("csstype").Property.FlexBasis<string | number> | undefined;
    borderColor?: keyof import("../../themes/colors").Colors | undefined;
    color?: keyof import("../../themes/colors").Colors | undefined;
    flex?: import("csstype").Property.Flex<string | number> | undefined;
    fontSize?: import("../../types").DefaultThemeOrCSSProp<"fontSizes", "fontSize">;
    grow?: import("csstype").Property.FlexGrow | undefined;
    hasRadius?: boolean | undefined;
    hiddenS?: boolean | undefined;
    hiddenXS?: boolean | undefined;
    padding?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"padding">; /**
     * We need to know when the select is open because only then will viewportRef
     * not be null. Because it uses a portal that (sensibly) is not mounted 24/7.
     */
    paddingBottom?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingBottom">;
    paddingLeft?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingLeft">;
    paddingRight?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingRight">;
    paddingTop?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingTop">;
    marginLeft?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginLeft">;
    marginBottom?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginBottom">;
    marginRight?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginRight">;
    marginTop?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginTop">;
    shadow?: keyof import("../../themes/colors").Shadows | undefined;
    shrink?: import("csstype").Property.FlexShrink | undefined;
    lineHeight?: import("../../types").DefaultThemeOrCSSProp<"lineHeights", "lineHeight">;
    width?: import("../../types").DefaultThemeOrCSSProp<"spaces", "width">;
    minWidth?: import("../../types").DefaultThemeOrCSSProp<"spaces", "minWidth">;
    maxWidth?: import("../../types").DefaultThemeOrCSSProp<"spaces", "maxWidth">;
    height?: import("../../types").DefaultThemeOrCSSProp<"spaces", "height">;
    minHeight?: import("../../types").DefaultThemeOrCSSProp<"spaces", "minHeight">;
    maxHeight?: import("../../types").DefaultThemeOrCSSProp<"spaces", "maxHeight">;
    top?: import("../../types").DefaultThemeOrCSSProp<"spaces", "top">;
    left?: import("../../types").DefaultThemeOrCSSProp<"spaces", "left">;
    bottom?: import("../../types").DefaultThemeOrCSSProp<"spaces", "bottom">;
    right?: import("../../types").DefaultThemeOrCSSProp<"spaces", "right">;
    borderRadius?: import("csstype").Property.BorderRadius<string | number> | undefined;
    borderStyle?: import("csstype").Property.BorderStyle | undefined;
    borderWidth?: import("csstype").Property.BorderWidth<string | number> | undefined;
    children?: import("react").ReactNode;
    as?: string | import("react").ComponentType<any> | undefined;
    forwardedAs?: string | import("react").ComponentType<any> | undefined;
} & {
    disabled?: boolean | undefined;
    isExternal?: boolean | undefined;
} & import("react").RefAttributes<HTMLAnchorElement>>>) => import("react/jsx-runtime").JSX.Element;
type MenuItemProps = Menu.ItemProps;
export { SimpleMenu, MenuItem, Menu };
export type { SimpleMenuProps, MenuItemProps };
