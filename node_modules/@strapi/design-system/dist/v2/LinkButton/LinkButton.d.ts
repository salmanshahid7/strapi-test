import React from 'react';
import { BaseButtonProps } from '../../BaseButton';
import { BaseLinkProps } from '../../BaseLink';
import { VARIANTS, BUTTON_SIZES } from '../../Button/constants';
interface SharedLinkProps extends BaseLinkProps {
    disabled?: boolean;
    endIcon?: React.ReactNode;
    size?: (typeof BUTTON_SIZES)[number];
    startIcon?: React.ReactNode;
    variant?: (typeof VARIANTS)[number];
}
export type LinkButtonProps = SharedLinkProps & BaseButtonProps;
export declare const LinkButton: React.ForwardRefExoticComponent<SharedLinkProps & Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & Pick<import("styled-components").CSSProperties, "cursor" | "display" | "overflow" | "pointerEvents" | "transform" | "position" | "textAlign" | "textTransform" | "zIndex" | "animation" | "transition"> & {
    _hover?: ((theme: import("styled-components").DefaultTheme) => string) | undefined;
    background?: import("../../types").DefaultThemeOrCSSProp<"colors", "background">;
    basis?: import("csstype").Property.FlexBasis<string | number> | undefined;
    borderColor?: keyof import("../../themes/colors").Colors | undefined;
    color?: keyof import("../../themes/colors").Colors | undefined;
    flex?: import("csstype").Property.Flex<string | number> | undefined;
    fontSize?: import("../../types").DefaultThemeOrCSSProp<"fontSizes", "fontSize">;
    grow?: import("csstype").Property.FlexGrow | undefined;
    hasRadius?: boolean | undefined;
    hiddenS?: boolean | undefined;
    hiddenXS?: boolean | undefined;
    padding?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"padding">;
    paddingBottom?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingBottom">;
    paddingLeft?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingLeft">;
    paddingRight?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingRight">;
    paddingTop?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"paddingTop">;
    marginLeft?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginLeft">;
    marginBottom?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginBottom">;
    marginRight?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginRight">;
    marginTop?: import("../../helpers/handleResponsiveValues").ResponsiveValue<"marginTop">;
    shadow?: keyof import("../../themes/colors").Shadows | undefined;
    shrink?: import("csstype").Property.FlexShrink | undefined;
    lineHeight?: import("../../types").DefaultThemeOrCSSProp<"lineHeights", "lineHeight">;
    width?: import("../../types").DefaultThemeOrCSSProp<"spaces", "width">;
    minWidth?: import("../../types").DefaultThemeOrCSSProp<"spaces", "minWidth">;
    maxWidth?: import("../../types").DefaultThemeOrCSSProp<"spaces", "maxWidth">;
    height?: import("../../types").DefaultThemeOrCSSProp<"spaces", "height">;
    minHeight?: import("../../types").DefaultThemeOrCSSProp<"spaces", "minHeight">;
    maxHeight?: import("../../types").DefaultThemeOrCSSProp<"spaces", "maxHeight">;
    top?: import("../../types").DefaultThemeOrCSSProp<"spaces", "top">;
    left?: import("../../types").DefaultThemeOrCSSProp<"spaces", "left">;
    bottom?: import("../../types").DefaultThemeOrCSSProp<"spaces", "bottom">;
    right?: import("../../types").DefaultThemeOrCSSProp<"spaces", "right">;
    borderRadius?: import("csstype").Property.BorderRadius<string | number> | undefined;
    borderStyle?: import("csstype").Property.BorderStyle | undefined;
    borderWidth?: import("csstype").Property.BorderWidth<string | number> | undefined;
    children?: React.ReactNode;
    as?: string | React.ComponentType<any> | undefined;
    forwardedAs?: string | React.ComponentType<any> | undefined;
} & {
    alignItems?: import("csstype").Property.AlignItems | undefined;
    direction?: import("csstype").Property.FlexDirection | undefined;
    gap?: any;
    inline?: boolean | undefined;
    justifyContent?: import("csstype").Property.JustifyContent | undefined;
    wrap?: import("csstype").Property.FlexWrap | undefined;
} & React.RefAttributes<HTMLAnchorElement>>;
export {};
