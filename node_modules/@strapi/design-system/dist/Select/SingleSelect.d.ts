import * as React from 'react';
import * as SelectParts from './SelectParts';
import { FieldLabelProps, FieldProps } from '../Field';
type SingleSelectPropsWithoutLabel = Omit<SelectParts.SingleSelectProps, 'value'> & Pick<SelectParts.ContentProps, 'onCloseAutoFocus'> & Pick<SelectParts.TriggerProps, 'clearLabel' | 'onClear' | 'size' | 'startIcon'> & Pick<SelectParts.ValueProps, 'placeholder'> & Pick<FieldProps, 'error' | 'hint' | 'id'> & {
    /**
     * @default (value) => value.toString()
     */
    customizeContent?(value?: string | number): string;
    labelAction?: FieldLabelProps['action'];
    onChange?: (value: string | number) => void;
    onReachEnd?: (entry: IntersectionObserverEntry) => void;
    /**
     * @preserve
     * @deprecated This prop is no longer required and will be removed in v2 of the DS.
     * It has no effect on the component.
     */
    selectButtonTitle?: string;
    value?: string | number | null;
};
export type SingleSelectProps = (SingleSelectPropsWithoutLabel & {
    label: string;
    'aria-label'?: never;
}) | (SingleSelectPropsWithoutLabel & {
    'aria-label': string;
    label?: never;
});
export type SingleSelectElement = SingleSelectInputElement;
export declare const SingleSelect: React.ForwardRefExoticComponent<SingleSelectProps & React.RefAttributes<HTMLDivElement>>;
export interface SingleSelectInputProps extends Omit<SingleSelectPropsWithoutLabel, 'labelAction' | 'hint' | 'id'> {
    'aria-label'?: string;
    id?: string;
    label?: string;
}
export type SingleSelectInputElement = HTMLDivElement;
export declare const SingleSelectInput: React.ForwardRefExoticComponent<SingleSelectInputProps & React.RefAttributes<HTMLDivElement>>;
export interface SingleSelectOptionProps extends Omit<SelectParts.ItemProps, 'value'> {
    startIcon?: React.ReactNode;
    value: string | number;
}
export declare const SingleSelectOption: React.ForwardRefExoticComponent<SingleSelectOptionProps & React.RefAttributes<HTMLDivElement>>;
export {};
