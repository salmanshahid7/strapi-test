import * as React from 'react';
import { DefaultTheme } from 'styled-components';
declare const AccordionTypography: import("styled-components").StyledComponent<"span", DefaultTheme, import("../Typography").TypographyProps<"span">, never>;
type AccordionSize = 'S' | 'M';
type AccordionVariant = 'primary' | 'secondary';
interface AccordionProps {
    children: React.ReactNode;
    /**
     * If `true`, the accordion will be disabled.
     */
    disabled?: boolean;
    /**
     * If defined, will add a border (borderColor: `danger600`) and display the error message below the component.
     */
    error?: string;
    /**
     * If `true`, an expanded Accordion will be rendered.
     */
    expanded?: boolean;
    /**
     * If `false`, the error message won't show.
     * If the `Accordion` is as child of an `AccordionGroup`, this prop will be set to `false` automatically.
     * The error message of the `AccordionGroup` will be shown below the group instead of the Accordion itself.
     */
    hasErrorMessage?: boolean;
    /**
     * The id of the component.
     */
    id?: string;
    /**
     * The callback invoked after a click event on the `AccordionToggle`.
     */
    onToggle?: () => void;
    /**
     * Shadow name (see `theme.shadows`)
     */
    shadow?: keyof DefaultTheme['shadows'];
    /**
     * @preserve
     * @deprecated use `onToggle` instead
     * The callback invoked after a click event on the `AccordionToggle`.
     */
    toggle?: () => void;
    /**
     * Size of the Accordion.
     */
    size?: AccordionSize;
    /**
     * Color variant for `Accordion`. The "secondary" variant reverses the background colors.
     * This is useful when you want to display a list and alternate the colors of the accordions.
     */
    variant?: AccordionVariant;
}
declare const Accordion: ({ children, disabled, error, expanded, hasErrorMessage, id, onToggle, toggle, size, variant, shadow, }: AccordionProps) => import("react/jsx-runtime").JSX.Element;
export { Accordion, AccordionTypography };
export type { AccordionProps, AccordionSize, AccordionVariant };
