import * as React from 'react';
import { Combobox as ComboboxPrimitive } from '@strapi/ui-primitives';
import { FieldLabelProps, FieldProps } from '../Field';
export interface ComboboxInputProps extends Pick<ComboboxPrimitive.RootProps, 'allowCustomValue' | 'value' | 'autocomplete' | 'textValue' | 'disabled' | 'defaultTextValue' | 'required' | 'disabled' | 'isPrintableCharacter'>, Pick<FieldProps, 'error' | 'id'>, Omit<ComboboxPrimitive.TextInputProps, 'required' | 'disabled' | 'value' | 'onChange' | 'size'> {
    children: React.ReactNode;
    className?: string;
    clearLabel?: string;
    creatable?: boolean;
    createMessage?: (inputValue: string) => string;
    defaultFilterValue?: string;
    defaultTextValue?: string;
    defaultOpen?: boolean;
    open?: boolean;
    filterValue?: string;
    hasMoreItems?: boolean;
    loading?: boolean;
    loadingMessage?: string;
    noOptionsMessage?: (inputValue: string) => string;
    onChange?: (value?: string) => void;
    onClear?: (event: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLDivElement>) => void;
    onCreateOption?: (inputValue: string) => void;
    onFilterValueChange?: (filterValue?: string) => void;
    onInputChange?: React.ChangeEventHandler<HTMLInputElement>;
    onLoadMore?: (entry: IntersectionObserverEntry) => void;
    onOpenChange?: (open?: boolean) => void;
    onTextValueChange?: (textValue?: string) => void;
    placeholder?: string;
    size?: 'S' | 'M';
    startIcon?: React.ReactNode;
}
export type ComboboxInputElement = HTMLInputElement;
export declare const ComboboxInput: React.ForwardRefExoticComponent<ComboboxInputProps & React.RefAttributes<HTMLInputElement>>;
interface ComboboxPropsWithoutLabel extends ComboboxInputProps, Pick<FieldProps, 'hint'> {
    labelAction?: FieldLabelProps['action'];
}
export type ComboboxProps = (ComboboxPropsWithoutLabel & {
    label: string;
    'aria-label'?: never;
}) | (ComboboxPropsWithoutLabel & {
    label?: never;
    'aria-label': string;
});
export declare const Combobox: React.ForwardRefExoticComponent<ComboboxProps & React.RefAttributes<HTMLInputElement>>;
type CreatableComboboxPropsWithoutLabel = Omit<ComboboxPropsWithoutLabel, 'onCreateOption'> & Required<Pick<ComboboxPropsWithoutLabel, 'onCreateOption'>>;
export type CreatableComboboxProps = (CreatableComboboxPropsWithoutLabel & {
    label: string;
    'aria-label'?: never;
}) | (CreatableComboboxPropsWithoutLabel & {
    label?: never;
    'aria-label': string;
});
export declare const CreatableCombobox: (props: CreatableComboboxProps) => import("react/jsx-runtime").JSX.Element;
export interface ComboboxOptionProps extends ComboboxPrimitive.ItemProps {
    children: React.ReactNode;
}
export declare const Option: React.ForwardRefExoticComponent<ComboboxOptionProps & React.RefAttributes<HTMLDivElement>>;
export declare const OptionBox: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    $hasHover?: boolean | undefined;
}, never>;
export {};
